<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
	xmlns:os="http://www.mulesoft.org/schema/mule/os"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/os http://www.mulesoft.org/schema/mule/os/current/mule-os.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
	<db:config name="Database_Config" doc:name="Database Config"
		doc:id="4f72545d-7765-4c77-ad6c-a772aede720b">
		<db:oracle-connection host="129.147.16.140"
			user="c_mulesoft" password="Qsx_13R5"
			serviceName="jdorcldv.netjiuwoz.vcnzgqox.oraclevcn.com" />
	</db:config>
	<os:object-store name="Object_store_Previous_Job_Run"
		doc:name="Object store" doc:id="fc1b620a-7c47-498b-aa98-021ea81b9a49"
		entryTtl="3" entryTtlUnit="DAYS" expirationIntervalUnit="DAYS" config-ref="ObjectStore_Config"/>



	<salesforce:sfdc-config name="Salesforce_Config" doc:name="Salesforce Config" doc:id="c9c91be1-f352-4c40-a2bf-c9ec5ed45ffc" >
		<salesforce:basic-connection username="ntnmule@prowesssoft.com.muledev" password="mulesoft@12345" securityToken="q3Gkr1FATSvhawBfGA6pXETtN" url="https://ntnconnect--muledev.sandbox.my.salesforce.com/services/Soap/u/58.0" />
	</salesforce:sfdc-config>
	<os:config name="ObjectStore_Config" doc:name="ObjectStore Config" doc:id="0dcc244c-0f18-42cc-a808-43c9f8b864a3" >
		<os:connection />
	</os:config>
	<flow name="jde-to-sf-flow"
		doc:id="6bd6fd27-e7b2-48b6-9128-7a289f8a1160" tracking:enable-default-events="true">
		<scheduler doc:name="Scheduler" doc:id="ec6d4725-fd5c-475e-865e-cbf70c9be8b0" >
			<scheduling-strategy >
				<fixed-frequency frequency="1" timeUnit="MINUTES"/>
			</scheduling-strategy>
		</scheduler>
		<ee:transform doc:name="jobRunTime"
			doc:id="9a2b07dd-5ff1-4bc4-b69f-57355df21773">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="jobRun"><![CDATA[%dw 2.0
import * from dw::core::Strings

fun year(date) =
  (date as Date).year

fun dayOfyear(date) =
  (date as Date).dayOfYear

fun C_value(date) =
  floor((year(date) - 1900) / 100)

fun JulianDate(date) =
  {
    date: C_value(date) ++ (year(date) as String)[2 to 3] ++ leftPad(dayOfyear(date), 3, "0"),
    time: (((date.hour / 24) + (date.minutes / 1440) + (date.seconds / 86400)) splitBy ".")[-1]
  }
output application/json  
---
JulianDate(now())]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<os:retrieve doc:name="retrievePreviousJobRun"
			doc:id="58f9cd3c-67fc-46af-8e45-f31831aa8bb5" key="previousJobRun"
			objectStore="Object_store_Previous_Job_Run" target="previousJobRun">
			<os:default-value><![CDATA[#[vars.jobRun]]]></os:default-value>
		</os:retrieve>
		<flow-ref doc:name="jde-to-sf-app-sub-flow"
			doc:id="b264356f-83ed-4901-946c-e20dfdaac094" name="jde-to-sf-app-sub-flow" />
		<os:store doc:name="Store current job run details"
			doc:id="7f98734c-00b4-4ce2-adb5-1d247b3dff6c" key="previousJobRun"
			objectStore="Object_store_Previous_Job_Run">
			<os:value><![CDATA[#[vars.jobRun]]]></os:value>
		</os:store>
	</flow>
	<sub-flow name="jde-to-sf-app-sub-flow" doc:id="bdca494a-f953-4135-bf4a-da2e2d264754" >
		<ee:transform doc:name="sql query" doc:id="41832f94-b4d6-45d5-b8fb-669625e1ff55" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output text/plain
---
readUrl("classpath://queryScript/sqlScript-$(p('mule.env')).dwl","text/plain")]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<db:select doc:name="execute sql query" doc:id="cf8331cf-f8eb-41c8-ae03-64b793e1ad7c" config-ref="Database_Config">
			<db:sql ><![CDATA[#[payload]]]></db:sql>
		</db:select>
		<choice doc:name="Choice" doc:id="8c067b99-f588-47c4-9cda-af2bc32f92c9" >
			<when expression="#[sizeOf(payload) &gt;0]">
				<ee:transform doc:name="capture db payload" doc:id="5d961419-8838-4906-a87b-822aa5b48ca6">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json deferred = true
---
payload]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="emptyArray"><![CDATA[%dw 2.0
output application/json
---
[]]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
				<foreach doc:name="For Each" doc:id="a2f42c96-4f82-4fdc-8334-7e4f19aa5488" collection="#[payload]" batchSize="${batch.size}">
			<ee:transform doc:name="final mapping payload" doc:id="48d224aa-b862-4e26-af14-4c0c87c80ca2">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import * from dw::core::Strings 
output application/json

// Function to convert Julian date to standard date format
fun julianToStandard(julianDate : Number) = do {
    var myDate = if (sizeOf(julianDate splitBy '') > 5) {
        date : leftPad(julianDate, 6, 0),
        day : leftPad(julianDate, 6, 0)[3 to -1],
        year : 1900 + leftPad(julianDate, 6, 0)[0 to 2]
    }
    else if (!isEmpty(julianDate) and !(julianDate ~= 0) and sizeOf(julianDate splitBy '') > 4) {
        date : julianDate,
        day : julianDate[2 to -1],
        year : 1900 + julianDate[0 to 1]
    }
    else if (!isEmpty(julianDate) and !(julianDate ~= 0) and sizeOf(julianDate splitBy '') > 3) {
        date : julianDate,
        day : julianDate[1 to -1],
        year : 1900 + (julianDate[0] default 0)
    }
    else if (!isEmpty(julianDate) and !(julianDate ~= 0) and sizeOf(julianDate splitBy '') >= 1) {
        date : julianDate,
        day : julianDate[0 to -1],
        year : 1900
    }
    else 0
  ---
  if (myDate ~= 0)
    0
  else
    ((("0101" ++ myDate.year) as Date {format: "ddMMyyyy"}) + ("P$(myDate.day - 1)D" as Period)) as Date {format: "yyyy-MM-dd"}
}

fun concatKeyValue(DRKY, DRDL01, pvalue) =
  (if (!isEmpty(DRKY))
  [trim(DRKY),trim(DRDL01)] filter (!isEmpty($)) joinBy  "-"
  else
    pvalue)
---
payload map (item, index) -> (do {
    var recordType = if (trim(item.ABSIC) ~= "NBCC" and trim(item.ABAT1) ~= "C")
      {
        "RecordTypeId": "012f4000000MFV5AAO",
        "Is_Account_Activated__c": true,
        "Status__c": 'Active',
        "Type": 'Customer',
        "Address_Type__c": 'C-Customer',
        "Integration_Complete__c": true
      }
    else if (trim(item.ABSIC) ~= "NBCC" and trim(item.ABAT1) ~= "CX")
      {
        "RecordTypeId": "012f4000000MFV5AAO",
        "Is_Account_Activated__c": false,
        "Status__c": 'Inactive',
        "Type": 'Customer',
        "Address_Type__c": 'CX-Inactive Customer',
        "Integration_Complete__c": true
      }
    else if (trim(item.ABSIC) ~= "NBCC" and trim(item.ABAT1) ~= "EU")
      {
        "RecordTypeId": "012f4000000d9wxAAA",
        "Is_Account_Activated__c": true,
        "Status__c": 'Active',
        "Type": 'End User',
        "Address_Type__c": 'EU-End User',
        "Integration_Complete__c": true
      }
    else if (trim(item.ABSIC) ~= "NBCC" and trim(item.ABAT1) ~= "EUX")
      {
        "RecordTypeId": "012f4000000d9wxAAA",
        "Is_Account_Activated__c": false,
        "Status__c": 'Inactive',
        "Type": 'End User',
        "Address_Type__c": 'EUX-Inactive End User',
        "Integration_Complete__c": true      }
    else
      null
    ---
    {
      "X1st_Address_Number__c": item.ABAN81,
      "X2nd_Address_Number__c": item.ABAN82,
      "X3rd_Party_Billing__c": item.ABAN83,
      "Name": trim(item.ABALPH),
      "AccountNumber": item.ABAN8,
      "RecordType": recordType,
      "Address_Type__c": concatKeyValue(item.BILLINGADDRESSTYPEDRKY, item.BILLINGADDRESSTYPEDRDL01, trim(item.ABAT1)),
      "Alpha_Name__c": trim(item.ABALPH),
      "Bill_To_Number__c": item.ABAN81,
 "Customer_Service_Coordinator_Code__c": concatKeyValue(item.COORDINATORCODEDRKY, item.COORDINATORCODEDRDL01, trim(item.ABAC05)),
    "DunsNumber": trim(item.ABDUNS),
    "Effective_Date__c": julianToStandard(item.ABEFTB) default "",
      "NumberOfEmployees": item.ABNOE,
      "Growth_Rate__c": item.ABGROWTHR,
      "JDE_AddressNumber__c": item.ABAN8,
      "Long_Address_Number__c": trim(item.ABALKY),
      "NBCA_Market__c": concatKeyValue(item.NBCAMARKETDRKY, item.NBCAMARKETDRDL01, trim(item.ABAC08)),
      "NBCA_MKT_DES__c": concatKeyValue(item.NBCAMKTDESDRKY, item.NBCAMKTDESDRDL01, trim(item.ABAC08)),
      "NTN_ADV_PRC_GRP__c": if (!isEmpty(item.NTNADVPRCGRPDRDL01) and !isEmpty(item.NTNADVPRCGRPDRKY))
          trim(item.NTNADVPRCGRPDRKY) default "" ++ "-" ++ trim(item.NTNADVPRCGRPDRDL01) default ""
        else
          "",
       "NTN_Company_Name__c": trim(item.ABSIC),
      "NTN_Cust_Type__c": concatKeyValue(item.NTNCUSTTYPEDRKY, item.NTNCUSTTYPEDRDL01, trim(item.ABAC08)),
      "NTN_Customer_Group__c": concatKeyValue(item.NTNCUSTOMERGROUPDRKY, item.NTNCUSTOMERGROUPDRDL01, trim(item.ABAC10)),
      "NTN_Global_Market__c": concatKeyValue(item.NTNGLOBALMARKETDRKY, item.NTNGLOBALMARKETDRDL01, trim(item.ABAC12)),
      "NTN_Market_Code__c": concatKeyValue(item.NBCAMKTDESDRKY, item.NBCAMKTDESDRDL01, trim(item.ABAC08)),
      "Region__c": concatKeyValue(item.REGIONDRKY, item.REGIONDRDL01, trim(item.ABAC02)),
      "Rep_Code__c": concatKeyValue(item.REPCODEDRKY, item.REPCODEDRDL01, trim(item.ABAC04)),
      "Sic": trim(item.ABSIC),
      "SicDesc": trim(item.SicDesc),
      "YearStarted": trim(item.ABYEARSTAR),
      "Mailing_Name__c": trim(item.MAILINGNAME),
      "Bill_To_Fax__c": if(!isEmpty(item.BILLFAXWPAR1) and !isEmpty(item.BILLFAXWPPH1))["(", trim(item.BILLFAXWPAR1), ")", " ", trim(item.BILLFAXWPPH1)] joinBy "" else "",
      "Bill_To_Phone__c":if(!isEmpty(item.BILLPHONEWPAR1) and !isEmpty(item.BILLPHONEWPPH1))["(", trim(item.BILLPHONEWPAR1), ")", " ", trim(item.BILLPHONEWPPH1)] joinBy "" else "",

      "Fax": if(!isEmpty(item.BILLFAXABAN8WPAR1) and !isEmpty(item.BILLFAXABAN8WPPH1)) ["(", trim(item.BILLFAXABAN8WPAR1), ")", " ", trim(item.BILLFAXABAN8WPPH1)] joinBy "" else "",
      "Phone": if(!isEmpty(item.PHONEWPAR1) and !isEmpty(item.PHONEWPPH1)) ["(", trim(item.PHONEWPAR1), ")", " ", trim(item.PHONEWPPH1)] joinBy "" else "",
      "Website": trim(item.WEBSITEEAEMAL),
      "BillingAddress": {
        "BillingStreet": trim([
          trim(item.BILLINGADDRESSALADD1),
          trim(item.BILLINGADDRESSALADD2),
          trim(item.BILLINGADDRESSALADD3),
          trim(item.BILLINGADDRESSALADD4)
        ] filter (!isEmpty($)) joinBy " "),
        "BillingCity": trim(item.BILLINGADDRESSALCTY1),
        "BillingStateCode": trim(item.BILLINGADDRESSALADDS),
        "BillingPostalCode": trim(item.BILLINGADDRESSALADDZ),
        "BillingCountryCode":  trim(item.BILLINGCOUNTRYCODEVALUE),
      },
      "ShippingAddress": {
        "ShippingStreet": trim([
          trim(item.SHIPPINGADDRESSALADD1),
          trim(item.SHIPPINGADDRESSALADD2),
          trim(item.SHIPPINGADDRESSALADD3),
          trim(item.SHIPPINGADDRESSALADD4)
        ] filter (!isEmpty($)) joinBy " "),
        "ShippingCity": trim(item.SHIPPINGADDRESSALCTY1),
        "ShippingStateCode": trim(item.SHIPPINGADDRESSALADDS),
        "ShippingPostalCode": trim(item.SHIPPINGADDRESSALADDZ),
        "ShippingCountryCode": trim(item.SHIPPINGCOUNTRYCODEVALUE),
      },
      ("Parent": trim(item.PARENTAXDC)) if (!isEmpty(item.PARENTAXDC)),
      "Parent_Number__c": trim(item.ABAN86),
      "CurrencyIsoCode": item.CURRENCYISOCODEAICRCD,
      "Billing_Address_Type__c": 
        if (!isEmpty(item.BILLINGADDRESSTYPEDRDL01) and !isEmpty(item.BILLINGADDRESSTYPEDRKY))
          trim(item.BILLINGADDRESSTYPEDRKY) default "" ++ "-" ++ trim(item.BILLINGADDRESSTYPEDRDL01) default ""
        else
          "",
      "Credit_Limit__c": 
        if (!isEmpty(item.F03012TABLEAIACL))
          trim(item.F03012TABLEAIACL)
        else
          "",
      "Credit_Manager__c": concatKeyValue(item.CREDITMANAGERDRKY, item.CREDITMANAGERDRDL01, trim(item.F03012TABLEAICMGR)),
      "Customer_Price_Group_40PC__c": concatKeyValue(item.CUSTOMERPRICEGROUPDRKY, item.CUSTOMERPRICEGROUPDRDL01, trim(item.F03012TABLEAICPGP)),
      "Date_Account_Opened__c":  // Convert date to julian format,
        if (!isEmpty(item.F03012TABLEAIDAOJ))
          julianToStandard(trim(item.F03012TABLEAIDAOJ))
        else
          "",
      "Date_Of_Last_Credit_Review__c":  // Convert date to julian format,
        if (!isEmpty(item.F03012TABLEAIDLC))
          julianToStandard(trim(item.F03012TABLEAIDLC))
        else
          "",
      "Dun_Bradstreet_Rating__c": concatKeyValue(item.DUNBRADSTREETDRKY, item.DUNBRADSTREETDRDL01, trim(item.F03012TABLEAIDB)),
      "Factor_Special_Payee__c": 
        if (!isEmpty(item.F03012TABLEAIARPY))
          trim(item.F03012TABLEAIARPY)
        else
          "",
      "Hold_Orders_Code__c":  concatKeyValue(item.HOLDORDERSDRKY, item.HOLDORDERSDRDL01, trim(item.F03012TABLEAIHOLD)),
    
      "Payment_Terms_A_R__c": concatKeyValue(item.PAYMENTPNPTC, item.PAYMENTPNPTD, trim(item.F03012TABLEAITRAR)),
      "Print_Message__c": concatKeyValue(item.PRINTMESSAGEDRKY, item.PRINTMESSAGEDRDL01, trim(item.F03012TABLEAIINMG)),
      "Temporary_Credit_Message__c": concatKeyValue(item.TEMPORARYCREDITMESSAGEDRKY, item.TEMPORARYCREDITMESSAGEDRDL01, trim(item.F03012TABLEAITSTA)),
      "Branch_Code__c": trim(item.BRANCHCODEAXEXRA),
      "Owner": trim(item.OWNERCUALPH3),
      "Account_Coordinator__c": trim(item.ACCOUNTCOORDINATORCUALPH3),
      "Engineer__c": concatKeyValue(item.ENGINEERDRKY, item.ENGINEERDRDL01, trim(item.F03012TABLEAIAC06)),
      ("Bill_To_Account__c": trim(item.BILLACCOUNT)) if (!isEmpty(trim(item.BILLACCOUNT))),
      "Account_Engineer__c": trim(item.accountEngineer),
      "Account_Marketing_Rep__c": trim(item.ACCOUNTMARKETINGREP),
      "MKT_REP__c": concatKeyValue(item.MKTREPDRKY, item.MKTREPDRDL01, trim(item.F03012TABLEAIAC05)),
      "NTN_Company_Number__c": 
        if (trim(item.ABSIC) ~= "NBCC")
          "00010"
        else
          "00001"
    }
  })]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			<ee:transform doc:name="Transform Message" doc:id="3b14e576-5058-4417-b4ea-3f573755212e">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java 
---
payload map (record) -> {
 "X1st_Address_Number__c": record.X1st_Address_Number__c default "" ,
 "X2nd_Address_Number__c": record.X2nd_Address_Number__c default "",
 "X3rd_Party_Billing__c": record.X3rd_Party_Billing__c default "" ,
 "Name": record.Name default "",
 "AccountNumber": record.AccountNumber as String default "",
 "RecordTypeId": record.RecordType.RecordTypeId default "",
 "Address_Type__c": record.RecordType.Address_Type__c default "",
 "Alpha_Name__c": record.Alpha_Name__c default "",
 "Bill_To_Number__c": record.Bill_To_Number__c default "",
 "Customer_Service_Coordinator_Code__c": record.Customer_Service_Coordinator_Code__c default "",
 "Duns_Number__c": record.DunsNumber default "",
 "Effective_Date__c": if (record.Effective_Date__c == 0) "" else record.Effective_Date__c  as Date ,
 "NumberOfEmployees": record.NumberOfEmployees default "",
 "Growth_Rate__c": record.Growth_Rate__c default "" ,
 "JDE_AddressNumber__c": record.JDE_AddressNumber__c default "",
 "Long_Address_Number__c": record.Long_Address_Number__c  default "",
 "NBCA_Market__c": record.NBCA_Market__c default "",
 "NBCA_MKT_DES__c": record.NBCA_MKT_DES__c default "",
 "NTN_ADV_PRC_GRP__c": record.NTN_ADV_PRC_GRP__c default "",
 "NTN_Company_Name__c": record.NTN_Company_Name__c default "",
 "NTN_Cust_Type__c": record.NTN_Cust_Type__c default "",
 "NTN_Customer_Group__c": record.NTN_Customer_Group__c default "",
 "NTN_Global_Market__c": record.NTN_Global_Market__c default "",
 "NTN_Market_Code__c": record.NTN_Market_Code__c default "" ,
 "Region__c": record.Region__c default "",
 "Rep_Code__c": record.Rep_Code__c default "",
 "Sic": record.Sic default "",
 "SicDesc": record.SicDesc default "",
 "Status__c": record.RecordType.Status__c,
 "Type": record.RecordType."Type" default "" ,
 "Year_Started__c": record.Year_Started__c default "",
 "Mailing_Name__c":record.Mailing_Name__c default "",
 "Bill_To_Fax__c": record.Bill_To_Fax__c default "" ,
 "Bill_To_Phone__c": record.Bill_To_Phone__c default "",
 "Fax": record.Fax default "",
 "Phone": record.Phone default "",
 "Website": record.Website default "",
 "Parent_Number__c": record.Parent_Number__c default "",
 "CurrencyIsoCode": record.CurrencyIsoCode default "",
 "Credit_Limit__c": record.Credit_Limit__c default "",
 "Credit_Manager__c": record.Credit_Manager__c default "",
 "Customer_Price_Group_40PC__c": record.Customer_Price_Group_40PC__c default "",
 "Date_Account_Opened__c": record.Date_Account_Opened__c as Date default "",
 "Date_Of_Last_Credit_Review__c": record.Date_Of_Last_Credit_Review__c as Date default "",
 "Dun_Bradstreet_Rating__c": record.Dun_Bradstreet_Rating__c default "",
 "Factor_Special_Payee__c": record.Factor_Special_Payee__c default "",
 "Hold_Orders_Code__c": record.Hold_Orders_Code__c default "",
 "Payment_Terms_A_R__c": record.Payment_Terms_A_R__c default "",
 "Print_Message__c": record.Print_Message__c default "",
 "Temporary_Credit_Message__c": record.Temporary_Credit_Message__c default "",
 "Branch_Code__c": record.Branch_Code__c default "",
 "OwnerId": record.Owner default "",
 "Account_Coordinator__c": record.Account_Coordinator__c default "",
 "Engineer__c": record.Engineer__c default "",
 "Bill_To_Account__c": record.Bill_To_Account__c default "",
 "Account_Engineer__c": record.Account_Engineer__c default "",
 "Integration_Complete__c": record.RecordType.Integration_Complete__c  ,
 "Is_Account_Activated__c": record.RecordType.Is_Account_Activated__c ,
 "Account_Marketing_Rep__c": record.Account_Marketing_Rep__c default "",
 "MKT_REP__c": record.MKT_REP__c default "",
 "NTN_Company_Number__c": record.NTN_Company_Number__c default "",
 "ShippingStreet" : record.ShippingAddress.ShippingStreet default "",
 "ShippingCity" : record.ShippingAddress.ShippingCity default "",
 "ShippingCountryCode" : record.ShippingAddress.ShippingCountryCode default "",
 "ShippingPostalCode"  : record.ShippingAddress.ShippingPostalCode default "",
 "ShippingStateCode": record.ShippingAddress.ShippingStateCode default "" ,
 "BillingStreet":  record.BillingAddress.BillingStreet default "" ,
 "BillingCity":  record.BillingAddress.BillingCity default "" ,
 "BillingStateCode": record.BillingAddress.BillingStateCode default "" ,
 "BillingPostalCode" : record.BillingAddress.BillingPostalCode default "" ,
 "BillingCountryCode" : record.BillingAddress.BillingCountryCode default "" ,
 "Date_Account_Opened__c": record.Date_Account_Opened__c as Date  default "",
 "Date_Of_Last_Credit_Review__c": record.Date_Of_Last_Credit_Review__c as Date default ""
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			<salesforce:upsert doc:name="Upsert" doc:id="1cdf4ffe-86a1-437e-9b50-c4424f7ee789" config-ref="Salesforce_Config" objectType="Account" externalIdFieldName="JDE_AddressNumber__c" target="upsertResponse" />
			<logger level="INFO" doc:name="Logger" doc:id="c4db2fcf-68ff-43f2-8930-f2d95911c979" message="Upsert Complete" />
		</foreach>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="f554ee9c-5464-4569-8492-1af16c673941" message="No Accounts to Process in this Run Cycle"/>
			</otherwise>
		</choice>
	</sub-flow>
</mule>
